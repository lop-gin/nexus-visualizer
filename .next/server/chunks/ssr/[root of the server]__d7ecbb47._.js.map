{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 103, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Project_Janus/next-frontend-refactored/src/lib/supabase/client.ts"],"sourcesContent":["import { createClient } from '@supabase/supabase-js';\nimport { Database } from '@/types/supabase';\n\n// Environment variables for Supabase connection\n// These can be overridden by environment variables in production\nconst supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL || 'https://aoyaamulrgpdidzpotty.supabase.co';\nconst supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY || 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImFveWFhbXVscmdwZGlkenBvdHR5Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDI5OTU1MjYsImV4cCI6MjA1ODU3MTUyNn0.9DhaZQEjOZ5gPXfq14Kz2QdPoVwh-BBd6-Ho-I7TmLM';\n\n// Create a single supabase client for interacting with your database\nexport const supabase = createClient<Database>(supabaseUrl, supabaseAnonKey);\n\n// Function to check if Supabase connection is working\nexport async function checkSupabaseConnection() {\n  try {\n    const { data, error } = await supabase.from('roles').select('count').single();\n    if (error) throw error;\n    return { success: true, message: 'Connected to Supabase successfully' };\n  } catch (error: any) {\n    console.error('Supabase connection error:', error);\n    return { success: false, message: error.message || 'Failed to connect to Supabase' };\n  }\n}\n\n// Function to get Supabase configuration\nexport function getSupabaseConfig() {\n  return {\n    url: supabaseUrl,\n    key: supabaseAnonKey,\n  };\n}\n"],"names":[],"mappings":";;;;;AAAA;;AAGA,gDAAgD;AAChD,iEAAiE;AACjE,MAAM,cAAc,gFAAwC;AAC5D,MAAM,kBAAkB,wPAA6C;AAG9D,MAAM,WAAW,CAAA,GAAA,uLAAA,CAAA,eAAY,AAAD,EAAY,aAAa;AAGrD,eAAe;IACpB,IAAI;QACF,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG,MAAM,SAAS,IAAI,CAAC,SAAS,MAAM,CAAC,SAAS,MAAM;QAC3E,IAAI,OAAO,MAAM;QACjB,OAAO;YAAE,SAAS;YAAM,SAAS;QAAqC;IACxE,EAAE,OAAO,OAAY;QACnB,QAAQ,KAAK,CAAC,8BAA8B;QAC5C,OAAO;YAAE,SAAS;YAAO,SAAS,MAAM,OAAO,IAAI;QAAgC;IACrF;AACF;AAGO,SAAS;IACd,OAAO;QACL,KAAK;QACL,KAAK;IACP;AACF","debugId":null}},
    {"offset": {"line": 143, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Project_Janus/next-frontend-refactored/src/lib/supabase/migrations.ts"],"sourcesContent":["import { supabase } from './client';\n\n// Function to execute SQL migrations\nexport async function executeMigrations() {\n  try {\n    // Read the SQL file content\n    const sqlContent = `\n-- Create extension for UUID generation\nCREATE EXTENSION IF NOT EXISTS \"uuid-ossp\";\n\n-- Create companies table\nCREATE TABLE IF NOT EXISTS public.companies (\n    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),\n    name TEXT NOT NULL,\n    type TEXT NOT NULL CHECK (type IN ('manufacturer', 'distributor', 'both')),\n    address TEXT,\n    phone TEXT,\n    email TEXT,\n    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()\n);\n\n-- Enable RLS\nALTER TABLE public.companies ENABLE ROW LEVEL SECURITY;\n\n-- Create policies\nCREATE POLICY \"Allow users to view their own company\" ON public.companies\n    USING (id IN (\n        SELECT company_id FROM public.employees WHERE user_id = auth.uid()\n    ));\n\nCREATE POLICY \"Allow admins to manage their own company\" ON public.companies\n    USING (id IN (\n        SELECT company_id FROM public.employees WHERE user_id = auth.uid() AND is_admin = TRUE\n    ))\n    WITH CHECK (id IN (\n        SELECT company_id FROM public.employees WHERE user_id = auth.uid() AND is_admin = TRUE\n    ));\n\n-- Create roles table\nCREATE TABLE IF NOT EXISTS public.roles (\n    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),\n    name TEXT NOT NULL,\n    description TEXT,\n    is_predefined BOOLEAN DEFAULT FALSE,\n    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()\n);\n\n-- Add unique constraint on role name\nALTER TABLE public.roles ADD CONSTRAINT roles_name_unique UNIQUE (name);\n\n-- Enable RLS\nALTER TABLE public.roles ENABLE ROW LEVEL SECURITY;\n\n-- Create policies\nCREATE POLICY \"Allow full access to authenticated users\" ON public.roles\n    USING (auth.role() = 'authenticated')\n    WITH CHECK (auth.role() = 'authenticated');\n\n-- Create modules table\nCREATE TABLE IF NOT EXISTS public.modules (\n    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),\n    name TEXT NOT NULL,\n    description TEXT,\n    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()\n);\n\n-- Add unique constraint on module name\nALTER TABLE public.modules ADD CONSTRAINT modules_name_unique UNIQUE (name);\n\n-- Enable RLS\nALTER TABLE public.modules ENABLE ROW LEVEL SECURITY;\n\n-- Create policies\nCREATE POLICY \"Allow full access to authenticated users\" ON public.modules\n    USING (auth.role() = 'authenticated')\n    WITH CHECK (auth.role() = 'authenticated');\n\n-- Insert default modules\nINSERT INTO public.modules (name, description) VALUES\n    ('dashboard', 'Dashboard access'),\n    ('customers', 'Customer management'),\n    ('sales', 'Sales management'),\n    ('invoices', 'Invoice management'),\n    ('estimates', 'Estimate management'),\n    ('inventory', 'Inventory management'),\n    ('production', 'Production management'),\n    ('procurement', 'Procurement management'),\n    ('employees', 'Employee management'),\n    ('roles', 'Role management'),\n    ('settings', 'System settings')\nON CONFLICT (name) DO NOTHING;\n\n-- Create permissions table\nCREATE TABLE IF NOT EXISTS public.permissions (\n    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),\n    role_id UUID NOT NULL REFERENCES public.roles(id) ON DELETE CASCADE,\n    module_id UUID NOT NULL REFERENCES public.modules(id) ON DELETE CASCADE,\n    can_view BOOLEAN DEFAULT FALSE,\n    can_create BOOLEAN DEFAULT FALSE,\n    can_edit BOOLEAN DEFAULT FALSE,\n    can_delete BOOLEAN DEFAULT FALSE,\n    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n    UNIQUE(role_id, module_id)\n);\n\n-- Enable RLS\nALTER TABLE public.permissions ENABLE ROW LEVEL SECURITY;\n\n-- Create policies\nCREATE POLICY \"Allow full access to authenticated users\" ON public.permissions\n    USING (auth.role() = 'authenticated')\n    WITH CHECK (auth.role() = 'authenticated');\n\n-- Create employees table\nCREATE TABLE IF NOT EXISTS public.employees (\n    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),\n    user_id UUID REFERENCES auth.users(id) ON DELETE SET NULL,\n    full_name TEXT NOT NULL,\n    email TEXT NOT NULL,\n    phone TEXT,\n    address TEXT,\n    company_id UUID NOT NULL REFERENCES public.companies(id) ON DELETE CASCADE,\n    role_id UUID REFERENCES public.roles(id) ON DELETE SET NULL,\n    is_admin BOOLEAN DEFAULT FALSE,\n    status TEXT DEFAULT 'invited' CHECK (status IN ('active', 'inactive', 'invited')),\n    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()\n);\n\n-- Add unique constraint on email within a company\nALTER TABLE public.employees ADD CONSTRAINT employees_email_company_unique UNIQUE (email, company_id);\n\n-- Enable RLS\nALTER TABLE public.employees ENABLE ROW LEVEL SECURITY;\n\n-- Create policies\nCREATE POLICY \"Allow users to view their own company's employees\" ON public.employees\n    USING (company_id IN (\n        SELECT company_id FROM public.employees WHERE user_id = auth.uid()\n    ));\n\nCREATE POLICY \"Allow admins to manage their own company's employees\" ON public.employees\n    USING (company_id IN (\n        SELECT company_id FROM public.employees WHERE user_id = auth.uid() AND is_admin = TRUE\n    ))\n    WITH CHECK (company_id IN (\n        SELECT company_id FROM public.employees WHERE user_id = auth.uid() AND is_admin = TRUE\n    ));\n\n-- Create invitations table\nCREATE TABLE IF NOT EXISTS public.invitations (\n    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),\n    email TEXT NOT NULL,\n    company_id UUID NOT NULL REFERENCES public.companies(id) ON DELETE CASCADE,\n    role_id UUID REFERENCES public.roles(id) ON DELETE SET NULL,\n    invited_by UUID NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,\n    token TEXT NOT NULL,\n    expires_at TIMESTAMP WITH TIME ZONE NOT NULL,\n    status TEXT DEFAULT 'pending' CHECK (status IN ('pending', 'accepted', 'expired')),\n    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()\n);\n\n-- Add unique constraint on token\nALTER TABLE public.invitations ADD CONSTRAINT invitations_token_unique UNIQUE (token);\n\n-- Enable RLS\nALTER TABLE public.invitations ENABLE ROW LEVEL SECURITY;\n\n-- Create policies\nCREATE POLICY \"Allow users to view invitations for their company\" ON public.invitations\n    USING (company_id IN (\n        SELECT company_id FROM public.employees WHERE user_id = auth.uid()\n    ));\n\nCREATE POLICY \"Allow admins to manage invitations for their company\" ON public.invitations\n    USING (company_id IN (\n        SELECT company_id FROM public.employees WHERE user_id = auth.uid() AND is_admin = TRUE\n    ))\n    WITH CHECK (company_id IN (\n        SELECT company_id FROM public.employees WHERE user_id = auth.uid() AND is_admin = TRUE\n    ));\n\n-- Function to insert predefined roles\nCREATE OR REPLACE FUNCTION insert_predefined_roles()\nRETURNS VOID AS $$\nDECLARE\n    role_id UUID;\n    module_id UUID;\n    admin_role_id UUID;\nBEGIN\n    -- Insert Admin role\n    INSERT INTO public.roles (name, description, is_predefined)\n    VALUES ('Admin', 'Administrator with full access', TRUE)\n    ON CONFLICT (name) DO UPDATE SET description = EXCLUDED.description, is_predefined = EXCLUDED.is_predefined\n    RETURNING id INTO admin_role_id;\n    \n    -- Give Admin role full permissions on all modules\n    FOR module_id IN SELECT id FROM public.modules LOOP\n        INSERT INTO public.permissions (role_id, module_id, can_view, can_create, can_edit, can_delete)\n        VALUES (admin_role_id, module_id, TRUE, TRUE, TRUE, TRUE)\n        ON CONFLICT (role_id, module_id) DO UPDATE SET \n            can_view = EXCLUDED.can_view,\n            can_create = EXCLUDED.can_create,\n            can_edit = EXCLUDED.can_edit,\n            can_delete = EXCLUDED.can_delete;\n    END LOOP;\n    \n    -- Insert Sales Supervisor role\n    INSERT INTO public.roles (name, description, is_predefined)\n    VALUES ('Sales Supervisor', 'Manages sales team and has access to all sales functions', TRUE)\n    ON CONFLICT (name) DO UPDATE SET description = EXCLUDED.description, is_predefined = EXCLUDED.is_predefined\n    RETURNING id INTO role_id;\n    \n    -- Set Sales Supervisor permissions\n    FOR module_id IN SELECT id FROM public.modules WHERE name IN ('dashboard', 'customers', 'sales', 'invoices', 'estimates') LOOP\n        INSERT INTO public.permissions (role_id, module_id, can_view, can_create, can_edit, can_delete)\n        VALUES (role_id, module_id, TRUE, TRUE, TRUE, TRUE)\n        ON CONFLICT (role_id, module_id) DO UPDATE SET \n            can_view = EXCLUDED.can_view,\n            can_create = EXCLUDED.can_create,\n            can_edit = EXCLUDED.can_edit,\n            can_delete = EXCLUDED.can_delete;\n    END LOOP;\n    \n    -- Insert Sales Rep role\n    INSERT INTO public.roles (name, description, is_predefined)\n    VALUES ('Sales Rep', 'Can create and manage sales documents', TRUE)\n    ON CONFLICT (name) DO UPDATE SET description = EXCLUDED.description, is_predefined = EXCLUDED.is_predefined\n    RETURNING id INTO role_id;\n    \n    -- Set Sales Rep permissions\n    FOR module_id IN SELECT id FROM public.modules WHERE name IN ('dashboard', 'customers', 'sales', 'invoices', 'estimates') LOOP\n        INSERT INTO public.permissions (role_id, module_id, can_view, can_create, can_edit, can_delete)\n        VALUES (role_id, module_id, TRUE, TRUE, TRUE, FALSE)\n        ON CONFLICT (role_id, module_id) DO UPDATE SET \n            can_view = EXCLUDED.can_view,\n            can_create = EXCLUDED.can_create,\n            can_edit = EXCLUDED.can_edit,\n            can_delete = EXCLUDED.can_delete;\n    END LOOP;\n    \n    -- Insert other predefined roles with basic permissions\n    DECLARE\n        role_names TEXT[] := ARRAY['Procurement Supervisor', 'Procurement Rep', 'Production Supervisor', \n                                  'Machine Operator', 'Packaging Supervisor', 'Packaging Person', \n                                  'Transport Supervisor', 'Transport Person', 'Store Supervisor', \n                                  'Store Person', 'HR Supervisor'];\n        role_desc TEXT[] := ARRAY['Manages procurement team and has access to all procurement functions',\n                                 'Can create and manage procurement documents',\n                                 'Manages production team and has access to all production functions',\n                                 'Operates machines in the production process',\n                                 'Manages packaging team and has access to all packaging functions',\n                                 'Handles packaging operations',\n                                 'Manages transport team and has access to all transport functions',\n                                 'Handles transport operations',\n                                 'Manages store team and has access to all store functions',\n                                 'Handles store operations',\n                                 'Manages HR team and has access to all HR functions'];\n        i INTEGER;\n    BEGIN\n        FOR i IN 1..array_length(role_names, 1) LOOP\n            -- Insert role\n            INSERT INTO public.roles (name, description, is_predefined)\n            VALUES (role_names[i], role_desc[i], TRUE)\n            ON CONFLICT (name) DO UPDATE SET description = EXCLUDED.description, is_predefined = EXCLUDED.is_predefined\n            RETURNING id INTO role_id;\n            \n            -- Set basic permissions (view dashboard)\n            INSERT INTO public.permissions (role_id, module_id, can_view, can_create, can_edit, can_delete)\n            SELECT role_id, id, TRUE, FALSE, FALSE, FALSE\n            FROM public.modules \n            WHERE name = 'dashboard'\n            ON CONFLICT (role_id, module_id) DO UPDATE SET \n                can_view = EXCLUDED.can_view,\n                can_create = EXCLUDED.can_create,\n                can_edit = EXCLUDED.can_edit,\n                can_delete = EXCLUDED.can_delete;\n        END LOOP;\n    END;\nEND;\n$$ LANGUAGE plpgsql;\n\n-- Execute the function\nSELECT insert_predefined_roles();\n    `;\n\n    // Execute the SQL\n    const { error } = await supabase.rpc('exec_sql', { sql: sqlContent });\n    \n    if (error) {\n      console.error('Error executing migrations:', error);\n      return { success: false, error: error.message };\n    }\n    \n    return { success: true };\n  } catch (error: any) {\n    console.error('Error in executeMigrations:', error);\n    return { success: false, error: error.message };\n  }\n}\n\n// Function to create a new company and admin user during signup\nexport async function createCompanyAndAdmin(\n  userId: string,\n  companyName: string,\n  companyType: 'manufacturer' | 'distributor' | 'both',\n  fullName: string,\n  email: string,\n  phone?: string,\n  address?: string\n) {\n  try {\n    // Create company\n    const { data: company, error: companyError } = await supabase\n      .from('companies')\n      .insert({\n        name: companyName,\n        type: companyType,\n        phone,\n        email,\n        address,\n      })\n      .select()\n      .single();\n    \n    if (companyError) {\n      console.error('Error creating company:', companyError);\n      throw new Error('Failed to create company');\n    }\n    \n    // Get Admin role\n    const { data: adminRole, error: roleError } = await supabase\n      .from('roles')\n      .select('id')\n      .eq('name', 'Admin')\n      .single();\n    \n    if (roleError) {\n      console.error('Error fetching admin role:', roleError);\n      throw new Error('Failed to fetch admin role');\n    }\n    \n    // Create employee record for admin\n    const { data: employee, error: employeeError } = await supabase\n      .from('employees')\n      .insert({\n        user_id: userId,\n        full_name: fullName,\n        email,\n        phone,\n        address,\n        company_id: company.id,\n        role_id: adminRole.id,\n        is_admin: true,\n        status: 'active',\n      })\n      .select()\n      .single();\n    \n    if (employeeError) {\n      console.error('Error creating employee:', employeeError);\n      throw new Error('Failed to create employee record');\n    }\n    \n    return { company, employee };\n  } catch (error: any) {\n    console.error('Error in createCompanyAndAdmin:', error);\n    throw error;\n  }\n}\n\n// Function to check if database is initialized\nexport async function isDatabaseInitialized() {\n  try {\n    // Check if companies table exists\n    const { count, error } = await supabase\n      .from('companies')\n      .select('*', { count: 'exact', head: true });\n    \n    if (error && error.code === '42P01') { // Table doesn't exist\n      return false;\n    } else if (error) {\n      console.error('Error checking database:', error);\n      throw error;\n    }\n    \n    return true;\n  } catch (error) {\n    console.error('Error in isDatabaseInitialized:', error);\n    return false;\n  }\n}\n\n// Function to initialize database\nexport async function initializeDatabase() {\n  try {\n    const isInitialized = await isDatabaseInitialized();\n    \n    if (!isInitialized) {\n      const result = await executeMigrations();\n      return result;\n    }\n    \n    return { success: true, message: 'Database already initialized' };\n  } catch (error: any) {\n    console.error('Error initializing database:', error);\n    return { success: false, error: error.message };\n  }\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 549, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Project_Janus/next-frontend-refactored/src/providers/auth-provider.tsx"],"sourcesContent":["'use client';\n\nimport React from 'react';\nimport { createClientComponentClient } from '@supabase/auth-helpers-nextjs';\nimport { useRouter } from 'next/navigation';\nimport { Database } from '@/types/supabase';\nimport { createCompanyAndAdmin } from '@/lib/supabase/migrations';\nimport toast from 'react-hot-toast';\n\ntype AuthContextType = {\n  user: any | null;\n  isLoading: boolean;\n  signUp: (email: string, password: string, companyName: string, companyType: string, fullName: string) => Promise<void>;\n  signIn: (email: string, password: string) => Promise<void>;\n  signOut: () => Promise<void>;\n  forgotPassword: (email: string) => Promise<void>;\n  resetPassword: (password: string) => Promise<void>;\n};\n\nconst AuthContext = React.createContext<AuthContextType | undefined>(undefined);\n\nexport function AuthProvider({ children }: { children: React.ReactNode }) {\n  const supabase = createClientComponentClient<Database>();\n  const router = useRouter();\n  const [user, setUser] = React.useState<any | null>(null);\n  const [isLoading, setIsLoading] = React.useState(true);\n\n  // Check for session on mount\n  React.useEffect(() => {\n    const getSession = async () => {\n      const { data: { session } } = await supabase.auth.getSession();\n      setUser(session?.user || null);\n      setIsLoading(false);\n\n      // Set up auth state listener\n      const { data: { subscription } } = await supabase.auth.onAuthStateChange(\n        (_event, session) => {\n          setUser(session?.user || null);\n        }\n      );\n\n      return () => {\n        subscription.unsubscribe();\n      };\n    };\n\n    getSession();\n  }, [supabase.auth]);\n\n  // Sign up with email and password\n  const signUp = async (\n    email: string, \n    password: string, \n    companyName: string, \n    companyType: string,\n    fullName: string\n  ) => {\n    try {\n      setIsLoading(true);\n      \n      // Create user in Supabase Auth\n      const { data, error } = await supabase.auth.signUp({\n        email,\n        password,\n      });\n\n      if (error) {\n        throw error;\n      }\n\n      if (data.user) {\n        // Create company and admin record\n        await createCompanyAndAdmin(\n          data.user.id,\n          companyName,\n          companyType as 'manufacturer' | 'distributor' | 'both',\n          fullName,\n          email\n        );\n        \n        toast.success('Account created successfully! Please check your email for verification.');\n        router.push('/auth/login');\n      }\n    } catch (error: any) {\n      console.error('Error signing up:', error);\n      toast.error(error.message || 'Failed to sign up');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Sign in with email and password\n  const signIn = async (email: string, password: string) => {\n    try {\n      setIsLoading(true);\n      \n      const { data, error } = await supabase.auth.signInWithPassword({\n        email,\n        password,\n      });\n\n      if (error) {\n        throw error;\n      }\n\n      if (data.user) {\n        toast.success('Signed in successfully!');\n        router.push('/dashboard');\n      }\n    } catch (error: any) {\n      console.error('Error signing in:', error);\n      toast.error(error.message || 'Failed to sign in');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Sign out\n  const signOut = async () => {\n    try {\n      setIsLoading(true);\n      \n      const { error } = await supabase.auth.signOut();\n\n      if (error) {\n        throw error;\n      }\n\n      toast.success('Signed out successfully');\n      router.push('/');\n    } catch (error: any) {\n      console.error('Error signing out:', error);\n      toast.error(error.message || 'Failed to sign out');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Forgot password\n  const forgotPassword = async (email: string) => {\n    try {\n      setIsLoading(true);\n      \n      const { error } = await supabase.auth.resetPasswordForEmail(email, {\n        redirectTo: `${window.location.origin}/auth/reset-password`,\n      });\n\n      if (error) {\n        throw error;\n      }\n\n      toast.success('Password reset email sent. Please check your inbox.');\n    } catch (error: any) {\n      console.error('Error resetting password:', error);\n      toast.error(error.message || 'Failed to send password reset email');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Reset password\n  const resetPassword = async (password: string) => {\n    try {\n      setIsLoading(true);\n      \n      const { error } = await supabase.auth.updateUser({\n        password,\n      });\n\n      if (error) {\n        throw error;\n      }\n\n      toast.success('Password updated successfully');\n      router.push('/auth/login');\n    } catch (error: any) {\n      console.error('Error updating password:', error);\n      toast.error(error.message || 'Failed to update password');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const value = {\n    user,\n    isLoading,\n    signUp,\n    signIn,\n    signOut,\n    forgotPassword,\n    resetPassword,\n  };\n\n  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;\n}\n\nexport function useAuth() {\n  const context = React.useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 722, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Project_Janus/next-frontend-refactored/src/app/layout.tsx"],"sourcesContent":["'use client';\n\nimport { ThemeProvider } from 'next-themes';\nimport { Toaster } from 'react-hot-toast';\nimport { AuthProvider } from '@/providers/auth-provider';\n\nexport default function RootLayout({\n  children,\n}: {\n  children: React.ReactNode;\n}) {\n  return (\n    <html lang=\"en\">\n      <body>\n        <ThemeProvider attribute=\"class\" defaultTheme=\"light\">\n          <AuthProvider>\n            <main>{children}</main>\n            <Toaster position=\"top-right\" />\n          </AuthProvider>\n        </ThemeProvider>\n      </body>\n    </html>\n  );\n}\n"],"names":[],"mappings":";;;;AAEA;AACA;AACA;AAJA;;;;;AAMe,SAAS,WAAW,EACjC,QAAQ,EAGT;IACC,qBACE,8OAAC;QAAK,MAAK;kBACT,cAAA,8OAAC;sBACC,cAAA,8OAAC,gJAAA,CAAA,gBAAa;gBAAC,WAAU;gBAAQ,cAAa;0BAC5C,cAAA,8OAAC,qIAAA,CAAA,eAAY;;sCACX,8OAAC;sCAAM;;;;;;sCACP,8OAAC,uJAAA,CAAA,UAAO;4BAAC,UAAS;;;;;;;;;;;;;;;;;;;;;;;;;;;AAM9B","debugId":null}}]
}