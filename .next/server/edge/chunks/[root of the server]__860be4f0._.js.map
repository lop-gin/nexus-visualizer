{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 23, "column": 0}, "map": {"version":3,"sources":["turbopack:///[project]/src/middleware.ts"],"sourcesContent":["import { createMiddlewareClient } from '@supabase/auth-helpers-nextjs';\nimport { NextResponse } from 'next/server';\nimport type { NextRequest } from 'next/server';\nimport { Database } from '@/types/supabase';\n\n// This function can be marked `async` if using `await` inside\nexport async function middleware(request: NextRequest) {\n  // Create a response object that we can modify\n  const response = NextResponse.next();\n  \n  // Create a Supabase client for the middleware\n  const supabase = createMiddlewareClient<Database>({ req: request, res: response });\n  \n  // Get the current user session\n  const {\n    data: { session },\n  } = await supabase.auth.getSession();\n  \n  // Check if user is authenticated for protected routes\n  const isAuthRoute = request.nextUrl.pathname.startsWith('/auth');\n  const isDashboardRoute = request.nextUrl.pathname.startsWith('/dashboard');\n  const isSalesRoute = request.nextUrl.pathname.startsWith('/sales');\n  const isProtectedRoute = isDashboardRoute || isSalesRoute;\n  \n  // If accessing protected route without session, redirect to login\n  if (isProtectedRoute && !session) {\n    const redirectUrl = new URL('/auth/login', request.url);\n    redirectUrl.searchParams.set('redirect', request.nextUrl.pathname);\n    return NextResponse.redirect(redirectUrl);\n  }\n  \n  // If accessing auth routes with session, redirect to dashboard\n  if (isAuthRoute && session) {\n    return NextResponse.redirect(new URL('/dashboard', request.url));\n  }\n  \n  // If user is authenticated, set company context for data isolation\n  if (session) {\n    // Get user profile with company information\n    const { data: profile } = await supabase\n      .from('employees')\n      .select('company_id')\n      .eq('user_id', session.user.id)\n      .single();\n    \n    if (profile?.company_id) {\n      // Set company context for RLS policies\n      await supabase.rpc('set_app_variables', {\n        p_user_id: session.user.id,\n        p_company_id: profile.company_id\n      });\n    }\n  }\n  \n  return response;\n}\n\n// Configure the middleware to run on specific paths\nexport const config = {\n  matcher: [\n    // Apply to all routes except static files, api routes, and _next\n    '/((?!_next/static|_next/image|favicon.ico|api/|public/).*)',\n  ],\n};\n"],"names":[],"mappings":";;;;AAAA;AACA;AAAA;;;AAKO,eAAe,WAAW,OAAoB;IACnD,8CAA8C;IAC9C,MAAM,WAAW,6LAAA,CAAA,eAAY,CAAC,IAAI;IAElC,8CAA8C;IAC9C,MAAM,WAAW,CAAA,GAAA,gLAAA,CAAA,yBAAsB,AAAD,EAAY;QAAE,KAAK;QAAS,KAAK;IAAS;IAEhF,+BAA+B;IAC/B,MAAM,EACJ,MAAM,EAAE,OAAO,EAAE,EAClB,GAAG,MAAM,SAAS,IAAI,CAAC,UAAU;IAElC,sDAAsD;IACtD,MAAM,cAAc,QAAQ,OAAO,CAAC,QAAQ,CAAC,UAAU,CAAC;IACxD,MAAM,mBAAmB,QAAQ,OAAO,CAAC,QAAQ,CAAC,UAAU,CAAC;IAC7D,MAAM,eAAe,QAAQ,OAAO,CAAC,QAAQ,CAAC,UAAU,CAAC;IACzD,MAAM,mBAAmB,oBAAoB;IAE7C,kEAAkE;IAClE,IAAI,oBAAoB,CAAC,SAAS;QAChC,MAAM,cAAc,IAAI,IAAI,eAAe,QAAQ,GAAG;QACtD,YAAY,YAAY,CAAC,GAAG,CAAC,YAAY,QAAQ,OAAO,CAAC,QAAQ;QACjE,OAAO,6LAAA,CAAA,eAAY,CAAC,QAAQ,CAAC;IAC/B;IAEA,+DAA+D;IAC/D,IAAI,eAAe,SAAS;QAC1B,OAAO,6LAAA,CAAA,eAAY,CAAC,QAAQ,CAAC,IAAI,IAAI,cAAc,QAAQ,GAAG;IAChE;IAEA,mEAAmE;IACnE,IAAI,SAAS;QACX,4CAA4C;QAC5C,MAAM,EAAE,MAAM,OAAO,EAAE,GAAG,MAAM,SAC7B,IAAI,CAAC,aACL,MAAM,CAAC,cACP,EAAE,CAAC,WAAW,QAAQ,IAAI,CAAC,EAAE,EAC7B,MAAM;QAET,IAAI,SAAS,YAAY;YACvB,uCAAuC;YACvC,MAAM,SAAS,GAAG,CAAC,qBAAqB;gBACtC,WAAW,QAAQ,IAAI,CAAC,EAAE;gBAC1B,cAAc,QAAQ,UAAU;YAClC;QACF;IACF;IAEA,OAAO;AACT;AAGO,MAAM,SAAS;IACpB,SAAS;QACP,iEAAiE;QACjE;KACD;AACH"}}]
}